// Update your schema.prisma with Okta-specific fields

enum UserStatus {
  active
  suspended
  deleted
}

enum AuthProvider {
  okta
  local  // optional: if you want to support both Okta and local auth
}

model User {
  id              String    @id @default(uuid())
  
  // Okta-specific fields
  oktaId          String    @unique  // Okta user ID (sub claim)
  email           String    @unique
  username        String    @unique
  firstName       String?
  lastName        String?
  avatarUrl       String?
  
  // Auth metadata
  authProvider    AuthProvider @default(okta)
  emailVerified   Boolean   @default(false)
  
  // Status and timestamps
  status          UserStatus @default(active)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLoginAt     DateTime?
  
  // Relations
  pickSets        PickSet[]
  squadMembers    SquadMember[]
  ownedSquads     Squad[]    @relation("SquadOwner")
  sessions        Session[]
  
  @@index([email])
  @@index([username])
  @@index([oktaId])
  @@index([status])
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  userAgent   String?
  ipAddress   String?
  
  @@index([userId])
  @@index([token])
}

// Keep your existing models with User relations updated
model PickSet {
  id             String      @id @default(uuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  weekId         String
  submittedAtUtc DateTime?
  lockedAtUtc    DateTime?
  tiebreakerScore Int?
  status         PickSetStatus @default(draft)
  picks          Pick[]

  @@unique([userId, weekId])
  @@index([userId])
  @@index([weekId])
  @@index([status])
}

model Squad {
  id       String       @id @default(uuid())
  name     String
  joinCode String       @unique
  ownerId  String
  owner    User         @relation("SquadOwner", fields: [ownerId], references: [id])
  members  SquadMember[]
}

model SquadMember {
  id      String @id @default(uuid())
  squadId String
  squad   Squad  @relation(fields: [squadId], references: [id])
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  role    SquadRole @default(member)

  @@unique([squadId, userId])
}