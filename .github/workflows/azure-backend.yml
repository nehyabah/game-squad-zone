# Azure App Service deployment workflow for backend
name: Deploy Backend to Azure App Service

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/azure-backend.yml'
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_API_APP_NAME }}  # Using your existing secret
  NODE_VERSION: '18.x'                                  # Set this to the node version to use
  WORKING_DIRECTORY: backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ env.WORKING_DIRECTORY }}/package-lock.json'

    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm ci

    - name: Build TypeScript
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm run build

    - name: Run Prisma generate
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Create deployment package
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        # Create a deployment directory
        mkdir -p deploy
        
        # Copy necessary files
        cp -r dist deploy/
        cp -r node_modules deploy/
        cp -r prisma deploy/
        cp package*.json deploy/
        cp -r api deploy/ 2>/dev/null || true
        
        # Create web.config for Azure
        cat > deploy/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <webSocket enabled="false" />
            <handlers>
              <add name="iisnode" path="dist/src/main.server.js" verb="*" modules="iisnode"/>
            </handlers>
            <rewrite>
              <rules>
                <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                  <match url="^dist/src/main.server.js\/debug[\/]?" />
                </rule>
                <rule name="StaticContent">
                  <action type="Rewrite" url="public{REQUEST_URI}"/>
                </rule>
                <rule name="DynamicContent">
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                  </conditions>
                  <action type="Rewrite" url="dist/src/main.server.js"/>
                </rule>
              </rules>
            </rewrite>
            <security>
              <requestFiltering>
                <hiddenSegments>
                  <remove segment="bin"/>
                </hiddenSegments>
              </requestFiltering>
            </security>
            <httpErrors existingResponse="PassThrough" />
            <iisnode node_env="production" nodeProcessCountPerApplication="1" maxConcurrentRequestsPerProcess="1024" maxNamedPipeConnectionRetry="100" namedPipeConnectionRetryDelay="250" maxNamedPipeConnectionPoolSize="512" maxNamedPipePooledConnectionAge="30000" asyncCompletionThreadCount="0" initialRequestBufferSize="4096" maxRequestBufferSize="65536" watchedFiles="*.js;iisnode.yml" uncFileChangesPollingInterval="5000" gracefulShutdownTimeout="60000" loggingEnabled="true" logDirectory="iisnode" debuggingEnabled="false" debugHeaderEnabled="false" debuggerPortRange="5058-6058" debuggerPathSegment="debug" maxLogFileSizeInKB="128" maxTotalLogFileSizeInKB="1024" maxLogFiles="20" devErrorsEnabled="false" flushResponse="false" enableXFF="false" promoteServerVars="" configOverrides="iisnode.yml" />
          </system.webServer>
        </configuration>
        EOF

    - name: Upload artifact for deployment
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: ${{ env.WORKING_DIRECTORY }}/deploy

    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_API_PUBLISH_PROFILE }}
        package: ${{ env.WORKING_DIRECTORY }}/deploy