// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum UserStatus {
  active
  suspended
  deleted
}

enum AuthProvider {
  okta
  local
}

enum PickSetStatus {
  draft
  submitted
  locked
}

enum PickChoice {
  home
  away
}

enum SquadRole {
  owner
  admin
  member
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

// Models
model User {
  id              String    @id @default(uuid())
  oktaId          String    @unique
  email           String    @unique
  username        String    @unique
  firstName       String?
  lastName        String?
  avatarUrl       String?
  authProvider    AuthProvider @default(okta)
  emailVerified   Boolean   @default(false)
  status          UserStatus @default(active)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLoginAt     DateTime?
  
  // Relations
  pickSets        PickSet[]
  squadMembers    SquadMember[]
  ownedSquads     Squad[]    @relation("SquadOwner")
  sessions        Session[]
  squadPayments   SquadPayment[]
  
  @@index([email])
  @@index([username])
  @@index([oktaId])
  @@index([status])
}

model Session {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  revokedAt   DateTime?
  userAgent   String?
  ipAddress   String?
  
  @@index([userId])
  @@index([token])
}

model Game {
  id         String    @id
  startAtUtc DateTime
  weekId     String
  lines      GameLine[]
  picks      Pick[]
}

model GameLine {
  gameId      String
  game        Game      @relation(fields: [gameId], references: [id])
  spread      Float
  source      String
  fetchedAtUtc DateTime

  @@id([gameId, source, fetchedAtUtc])
}

model PickSet {
  id             String      @id @default(uuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id])
  weekId         String
  submittedAtUtc DateTime?
  lockedAtUtc    DateTime?
  tiebreakerScore Int?
  status         PickSetStatus @default(draft)
  picks          Pick[]

  @@unique([userId, weekId])
  @@index([userId])
  @@index([weekId])
  @@index([status])
}

model Pick {
  id           String     @id @default(uuid())
  pickSetId    String
  pickSet      PickSet    @relation(fields: [pickSetId], references: [id])
  gameId       String
  game         Game       @relation(fields: [gameId], references: [id])
  choice       PickChoice
  spreadAtPick Float
  lineSource   String
  createdAtUtc DateTime   @default(now())

  @@unique([pickSetId, gameId])
}

model Squad {
  id          String       @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  joinCode    String       @unique
  ownerId     String
  owner       User         @relation("SquadOwner", fields: [ownerId], references: [id])
  
  // Optional pot/prize settings
  potEnabled  Boolean      @default(false)
  potAmount   Float?
  potCurrency String       @default("usd")
  potDeadline DateTime?
  
  // Stripe IDs (only used if pot is enabled)
  stripePriceId    String?
  stripeProductId  String?
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  members     SquadMember[]
  payments    SquadPayment[]
}

model SquadMember {
  id      String @id @default(uuid())
  squadId String
  squad   Squad  @relation(fields: [squadId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  role    SquadRole @default(member)

  @@unique([squadId, userId])
}

model SquadPayment {
  id                String   @id @default(uuid())
  squadId           String
  squad             Squad    @relation(fields: [squadId], references: [id], onDelete: Cascade)
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  amount            Float
  currency          String
  stripePaymentId   String?
  stripeSessionId   String?
  status            PaymentStatus @default(pending)
  paidAt            DateTime?
  createdAt         DateTime @default(now())
  
  @@unique([squadId, userId])
  @@index([squadId])
  @@index([userId])
}