name: 🚀 Backend - Deploy to Azure App Service

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/backend-azure.yml"
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
  workflow_call:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: "18"

jobs:
  lint-and-test:
    name: 🔍 Lint & Test Backend
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install dependencies
        run: cd backend && npm ci

      - name: 🔨 Generate Prisma Client
        run: cd backend && npx prisma generate

      - name: 🏗️ Type check
        run: cd backend && npm run type-check
        continue-on-error: true

      - name: ✅ Run tests (if available)
        run: cd backend && npm test || echo "⚠️ No tests configured, skipping..."
        continue-on-error: true

  build:
    name: 🏗️ Build Backend
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name != 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install dependencies
        run: cd backend && npm ci

      - name: 🔨 Generate Prisma Client
        run: cd backend && npx prisma generate

      - name: 🏗️ Build TypeScript
        run: cd backend && npm run build

      - name: 📁 Prepare deployment package
        run: |
          echo "🚀 Creating deployment package..."

          mkdir -p deploy

          # Copy compiled JavaScript from dist folder
          cp -r backend/dist deploy/
          # Copy Prisma schema and migrations
          cp -r backend/prisma deploy/
          # Copy source files (for source maps if needed)
          cp -r backend/src deploy/
          cp -r backend/node_modules deploy/ || echo "No node_modules to copy"
          
          # Copy the simple server.js to root of deploy
          cp backend/server.js deploy/ 2>/dev/null || echo "No server.js to copy"
          
          # Also copy server.azure.js to dist/src if it wasn't built
          mkdir -p deploy/dist/src
          cp backend/src/server.azure.js deploy/dist/src/ 2>/dev/null || echo "No server.azure.js"

          cp backend/package.json deploy/
          cp backend/package-lock.json deploy/
          cp backend/web.config deploy/ 2>/dev/null || echo "No web.config to copy"

          cd backend
          node -e "
          const pkg = require('./package.json');
          pkg.scripts.start = 'node dist/src/server.azure.js';
          pkg.main = 'dist/src/server.azure.js';
          delete pkg.devDependencies;
          require('fs').writeFileSync('../deploy/package.json', JSON.stringify(pkg, null, 2));
          "
          cd ..

          echo "✅ Deployment package ready"
          echo "📊 Package contents:"
          ls -la deploy/
          echo "📊 Package size: $(du -sh deploy)"

      - name: 🗃️ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: deploy/
          retention-days: 30

  deploy:
    name: 🚀 Deploy to Azure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://squadpot-backend-dvbpatdag5a6aqff.northeurope-01.azurewebsites.net

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: ./deploy

      - name: 🔍 Verify deployment package
        run: |
          echo "📋 Deployment package contents:"
          ls -la ./deploy
          echo "📊 Package size: $(du -sh deploy)"
          echo "🔧 Package.json check:"
          cat deploy/package.json | head -20
          echo "📁 Dist folder contents:"
          find ./deploy/dist -type f -name "*.js" | head -10
          echo "🧹 Ensuring no Windows artifacts:"
          ls -la ./deploy/
          if [ -f ./deploy/startup.js ]; then
            echo "⚠️ Found startup.js - this should not exist"
            rm -f ./deploy/startup.js
          fi
          if [ -f ./deploy/web.config ]; then
            echo "⚠️ Found web.config - this should not exist"
            rm -f ./deploy/web.config
          fi

      - name: 🚀 Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          publish-profile: ${{ secrets.AZURE_API_PUBLISH_PROFILE }}
          package: ./deploy
          clean: true
        continue-on-error: true
        id: deploy_attempt_1

      - name: 🔄 Retry deployment if failed
        if: steps.deploy_attempt_1.outcome == 'failure'
        run: |
          echo "🔄 First deployment failed, waiting 30 seconds and retrying..."
          sleep 30

      - name: 🚀 Retry Deploy to Azure App Service
        if: steps.deploy_attempt_1.outcome == 'failure'
        uses: azure/webapps-deploy@v3
        with:
          publish-profile: ${{ secrets.AZURE_API_PUBLISH_PROFILE }}
          package: ./deploy
          clean: true

      - name: 🏥 Health check
        run: |
          echo "🔍 Waiting for deployment to be ready..."
          sleep 60

          for i in {1..5}; do
            echo "🩺 Health check attempt $i/5"
            if curl -f --max-time 30 "https://squadpot-backend-dvbpatdag5a6aqff.northeurope-01.azurewebsites.net/health" || \
               curl -f --max-time 30 "https://squadpot-backend-dvbpatdag5a6aqff.northeurope-01.azurewebsites.net/api/health" || \
               curl -f --max-time 30 "https://squadpot-backend-dvbpatdag5a6aqff.northeurope-01.azurewebsites.net/"; then
              echo "✅ Backend is healthy!"
              break
            else
              echo "⚠️ Health check failed, retrying in 20 seconds..."
              sleep 20
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              echo "🔍 Check Azure App Service logs for details"
              echo "💡 Tip: Make sure your app listens on process.env.PORT"
              exit 1
            fi
          done

  setup-database:
    name: 🗄️ Setup Database (Prisma)
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Database setup
        run: |
          echo "🗄️ Prisma database migrations handled via postinstall script"
          echo "✅ Database schema will be updated automatically on deployment"
        continue-on-error: true
