# Azure DevOps Pipeline for Game Squad Zone
trigger:
- main

variables:
  # Azure App Service names
  backendAppName: 'game-squad-zone-api'
  frontendAppName: 'game-squad-zone-app'
  
  # Node.js version
  nodeVersion: '18.x'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildBackend
    displayName: 'Build Backend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - script: |
        cd backend
        npm ci
        npm run build
        npx prisma generate
      displayName: 'Install dependencies and build backend'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'backend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
      displayName: 'Archive backend files'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'backend'
      displayName: 'Publish backend artifact'

  - job: BuildFrontend
    displayName: 'Build Frontend'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - script: |
        npm ci
        npm run build
      displayName: 'Install dependencies and build frontend'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'dist'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
      displayName: 'Archive frontend files'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'frontend'
      displayName: 'Publish frontend artifact'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployBackend
    displayName: 'Deploy Backend'
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Azure Service Connection'
              appType: 'webAppLinux'
              appName: $(backendAppName)
              package: '$(Pipeline.Workspace)/backend/backend.zip'
              runtimeStack: 'NODE|18-lts'
              startupCommand: 'npm start'
            displayName: 'Deploy to Azure App Service (Backend)'
          
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Azure Service Connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Run database migrations
                az webapp config appsettings set --name $(backendAppName) --resource-group your-resource-group --settings WEBSITE_RUN_FROM_PACKAGE=1
                # Trigger database migration (implement this based on your setup)
            displayName: 'Run Database Migration'

  - deployment: DeployFrontend
    displayName: 'Deploy Frontend'
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureStaticWebApp@0
            inputs:
              app_location: '/'
              api_location: ''
              output_location: 'dist'
              azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APPS_API_TOKEN)
            displayName: 'Deploy to Azure Static Web Apps'