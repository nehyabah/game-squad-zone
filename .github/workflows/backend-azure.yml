name: 🚀 Backend - Deploy to Azure App Service

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-azure.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
  workflow_call:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'

jobs:
  # Lint and Test Job
  lint-and-test:
    name: 🔍 Lint & Test Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 📦 Install dependencies  
      run: cd backend && npm install
    
    - name: 🔧 Generate Prisma client
      run: cd backend && npx prisma generate
    
    - name: 🏗️ Type check
      run: cd backend && npm run type-check
    
    - name: ✅ Run tests (if available)
      run: cd backend && npm test || echo "⚠️ No tests configured, skipping..."
      continue-on-error: true

  # Build Job
  build:
    name: 🏗️ Build Backend
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 📦 Install dependencies
      run: cd backend && npm install
    
    - name: 🔧 Generate Prisma client
      run: cd backend && npx prisma generate
    
    - name: 🏗️ Build TypeScript
      run: cd backend && npm run build
    
    - name: 📁 Prepare deployment package
      run: |
        echo "🚀 Creating deployment package..."
        
        # Create deployment directory
        mkdir -p deploy
        
        # Copy built application
        cp -r backend/dist deploy/
        cp -r backend/prisma deploy/
        cp -r backend/node_modules deploy/ || echo "⚠️ node_modules not found, will install in Azure"
        
        # Copy package files
        cp backend/package.json deploy/
        cp backend/package-lock.json deploy/
        
        # Create optimized package.json for production
        cat > deploy/package.json << 'EOF'
        {
          "name": "squadpot-backend",
          "version": "1.0.0",
          "type": "commonjs",
          "engines": {
            "node": ">=18.0.0",
            "npm": ">=8.0.0"
          },
          "scripts": {
            "start": "node dist/src/main.server.js",
            "postinstall": "npx prisma generate",
            "migrate": "npx prisma migrate deploy"
          },
          "dependencies": {
            "@fastify/cookie": "^8.3.0",
            "@fastify/cors": "^8.5.0",
            "@fastify/error": "^4.2.0",
            "@fastify/helmet": "^11.1.1",
            "@fastify/jwt": "^7.2.4",
            "@fastify/sensible": "^6.0.3",
            "@prisma/client": "^6.15.0",
            "@sinclair/typebox": "^0.34.41",
            "@types/bcryptjs": "^2.4.6",
            "bcryptjs": "^3.0.2",
            "date-fns": "^4.1.0",
            "dotenv": "^16.3.1",
            "fastify": "^4.29.1",
            "jose": "^6.1.0",
            "mysql2": "^3.14.4",
            "node-fetch": "^3.3.2",
            "pg": "^8.11.3",
            "postgresql": "^0.0.1",
            "prisma": "^6.15.0",
            "stripe": "^14.0.0"
          }
        }
        EOF
        
        # Create startup script for better error handling
        cat > deploy/startup.js << 'EOF'
        const { spawn } = require('child_process');
        const fs = require('fs');
        const path = require('path');
        
        console.log('🚀 Starting SquadPot Backend...');
        console.log('Node version:', process.version);
        console.log('Environment:', process.env.NODE_ENV || 'development');
        
        // Check if main server file exists
        const serverPath = path.join(__dirname, 'dist', 'src', 'main.server.js');
        if (!fs.existsSync(serverPath)) {
          console.error('❌ Server file not found at:', serverPath);
          console.log('📁 Available files:');
          console.log(fs.readdirSync(__dirname));
          process.exit(1);
        }
        
        // Start the server
        const server = spawn('node', [serverPath], {
          stdio: 'inherit',
          env: { ...process.env }
        });
        
        server.on('error', (err) => {
          console.error('❌ Server startup error:', err);
          process.exit(1);
        });
        
        server.on('exit', (code) => {
          console.log(`Server exited with code ${code}`);
          process.exit(code);
        });
        EOF
        
        # Update package.json to use startup script
        sed -i 's/"node dist\/src\/main.server.js"/"node startup.js"/' deploy/package.json
        
        # Create web.config for Windows App Service
        cat > deploy/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="iisnode" path="startup.js" verb="*" modules="iisnode"/>
            </handlers>
            <rewrite>
              <rules>
                <rule name="DynamicContent">
                  <match url=".*" />
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                  </conditions>
                  <action type="Rewrite" url="startup.js"/>
                </rule>
              </rules>
            </rewrite>
            <iisnode 
              node_env="%node_env%"
              nodeProcessCommandLine="%programfiles%\\nodejs\\node.exe"
              interceptor="%programfiles%\\iisnode\\interceptor.js" />
            <httpErrors existingResponse="PassThrough" />
            <security>
              <requestFiltering>
                <hiddenSegments>
                  <remove segment="bin"/>
                </hiddenSegments>
              </requestFiltering>
            </security>
          </system.webServer>
        </configuration>
        EOF
        
        echo "✅ Deployment package ready"
        echo "📊 Package size: $(du -sh deploy)"
    
    - name: 🗃️ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build-${{ github.sha }}
        path: deploy/
        retention-days: 30

  # Deploy Job
  deploy:
    name: 🚀 Deploy to Azure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://squadpot-backend-dvbpatdag5a6aqff.northeurope-01.azurewebsites.net
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build-${{ github.sha }}
        path: ./deploy
    
    - name: 🔍 Verify deployment package
      run: |
        echo "📋 Deployment package contents:"
        find ./deploy -type f -name "*.js" | head -10
        echo "📊 Package size: $(du -sh deploy)"
        echo "🔧 Package.json check:"
        cat deploy/package.json | head -20
    
    - name: 🚀 Deploy to Azure App Service
      uses: azure/webapps-deploy@v3
      with:
        app-name: 'SquadPot-Backend'
        publish-profile: ${{ secrets.AZURE_API_PUBLISH_PROFILE }}
        package: ./deploy
        clean: true
    
    - name: 🏥 Health check
      run: |
        echo "🔍 Waiting for deployment to be ready..."
        sleep 30
        
        # Try health check
        for i in {1..5}; do
          echo "🩺 Health check attempt $i/5"
          if curl -f --max-time 30 "https://squadpot-backend-dvbpatdag5a6aqff.northeurope-01.azurewebsites.net/health" || curl -f --max-time 30 "https://squadpot-backend-dvbpatdag5a6aqff.northeurope-01.azurewebsites.net/api/health"; then
            echo "✅ Backend is healthy!"
            break
          else
            echo "⚠️ Health check failed, retrying..."
            sleep 15
          fi
          
          if [ $i -eq 5 ]; then
            echo "❌ Health check failed after 5 attempts"
            echo "🔍 Check Azure App Service logs for details"
            exit 1
          fi
        done

  # Database Migration Job
  migrate:
    name: 🗃️ Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 📦 Install Prisma CLI
      run: npm install -g prisma
    
    - name: 🔧 Install backend dependencies
      run: cd backend && npm install
    
    - name: 🗃️ Run database migrations
      run: cd backend && npx prisma migrate deploy --schema=./prisma/schema.prisma
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    - name: ✅ Migration completed
      run: echo "🎉 Database migrations completed successfully!"