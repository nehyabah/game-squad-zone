name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'backend/**'
          frontend:
            - 'src/**'
            - 'public/**'
            - 'package.json'
            - 'vite.config.ts'
            - 'index.html'

  backend-check:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd backend
        npm ci
    
    - name: Setup environment
      run: |
        cd backend
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" > .env
        echo "JWT_SECRET=test-jwt-secret-key-for-testing-purposes-only" >> .env
    
    - name: Generate Prisma client
      run: |
        cd backend
        npx prisma generate
    
    - name: Build backend
      run: |
        cd backend
        npm run build

  frontend-check:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build frontend
      run: npm run build
      env:
        NODE_ENV: production

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        npm audit --audit-level high
        cd backend && npm audit --audit-level high

  deploy-staging:
    needs: [backend-check, frontend-check]
    if: github.ref == 'refs/heads/develop' && (needs.backend-check.result == 'success' || needs.frontend-check.result == 'success')
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    - name: Deploy to staging
      run: echo "Deploy to staging environment"
      # Add your staging deployment steps here

  deploy-production:
    needs: [backend-check, frontend-check, security]
    if: github.ref == 'refs/heads/main' && (needs.backend-check.result == 'success' || needs.frontend-check.result == 'success')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    - name: Deploy to production
      run: echo "Deploy to production environment"
      # Add your production deployment steps here