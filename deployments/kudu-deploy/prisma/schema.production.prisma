generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  oktaId             String              @unique
  email              String              @unique
  username           String              @unique
  firstName          String?
  lastName           String?
  avatarUrl          String?
  authProvider       AuthProvider        @default(okta)
  emailVerified      Boolean             @default(false)
  status             UserStatus          @default(active)
  walletBalance      Float               @default(0.0)
  walletCurrency     String              @default("eur")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  lastLoginAt        DateTime?
  displayName        String?
  phoneNumber        String?
  pickSets           PickSet[]
  sessions           Session[]
  ownedSquads        Squad[]             @relation("SquadOwner")
  squadMembers       SquadMember[]
  squadMessages      SquadMessage[]
  squadPayments      SquadPayment[]
  walletTransactions WalletTransaction[]

  @@index([email])
  @@index([username])
  @@index([oktaId])
  @@index([status])
}

model Session {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?
  userAgent String?
  ipAddress String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model Game {
  id               String         @id @default(uuid())
  externalId       String         @unique
  sport            Sport          @default(americanfootball_nfl)
  homeTeam         String
  awayTeam         String
  homeTeamLogo     String?
  awayTeamLogo     String?
  commenceTime     DateTime
  homeOdds         Float?
  awayOdds         Float?
  homeSpread       Float?
  awaySpread       Float?
  totalPoints      Float?
  overOdds         Float?
  underOdds        Float?
  season           String
  weekId           String
  status           GameStatus     @default(scheduled)
  homeScore        Int?
  awayScore        Int?
  completedAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  picks            Pick[]

  @@index([weekId])
  @@index([commenceTime])
  @@index([status])
  @@index([externalId])
}

model PickSet {
  id        String     @id @default(uuid())
  userId    String
  weekId    String
  status    PickStatus @default(pending)
  createdAtUtc DateTime @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  picks     Pick[]

  @@unique([userId, weekId])
  @@index([userId])
  @@index([weekId])
  @@index([status])
}

model Pick {
  id           String     @id @default(uuid())
  pickSetId    String
  gameId       String
  pickType     PickType
  value        String
  odds         Float?
  status       PickStatus @default(pending)
  result       String?
  payout       Float?
  createdAtUtc DateTime   @default(now())
  pickSet      PickSet    @relation(fields: [pickSetId], references: [id], onDelete: Cascade)
  game         Game       @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([pickSetId, gameId])
  @@index([pickSetId])
  @@index([gameId])
  @@index([status])
}

model Squad {
  id            String         @id @default(uuid())
  name          String
  description   String?
  ownerId       String
  maxMembers    Int            @default(10)
  entryFee      Float          @default(0.0)
  currency      String         @default("eur")
  weekId        String
  status        SquadStatus    @default(active)
  isPublic      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  owner         User           @relation("SquadOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members       SquadMember[]
  payments      SquadPayment[]
  messages      SquadMessage[]

  @@index([ownerId])
  @@index([weekId])
  @@index([status])
  @@index([isPublic])
}

model SquadMember {
  id        String           @id @default(uuid())
  squadId   String
  userId    String
  role      SquadMemberRole  @default(member)
  joinedAt  DateTime         @default(now())
  lastReadAt DateTime?
  squad     Squad            @relation(fields: [squadId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([squadId, userId])
  @@index([squadId])
  @@index([userId])
}

model SquadMessage {
  id        String   @id @default(uuid())
  squadId   String
  userId    String
  content   String
  createdAt DateTime @default(now())
  squad     Squad    @relation(fields: [squadId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([squadId])
  @@index([userId])
  @@index([createdAt])
}

model SquadPayment {
  id              String        @id @default(uuid())
  squadId         String
  userId          String
  amount          Int
  currency        String        @default("eur")
  status          PaymentStatus @default(pending)
  stripePaymentId String?       @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  squad           Squad         @relation(fields: [squadId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([squadId])
  @@index([userId])
  @@index([status])
  @@index([stripePaymentId])
}

model WalletTransaction {
  id              String            @id @default(uuid())
  userId          String
  type            TransactionType
  amount          Float
  currency        String            @default("eur")
  description     String?
  stripePaymentId String?
  createdAt       DateTime          @default(now())
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

enum AuthProvider {
  okta
  google
  local
}

enum UserStatus {
  active
  suspended
  inactive
}

enum Sport {
  americanfootball_nfl
}

enum GameStatus {
  scheduled
  live
  completed
  cancelled
  postponed
}

enum PickType {
  moneyline
  spread
  total
}

enum PickStatus {
  pending
  won
  lost
  pushed
  cancelled
}

enum SquadStatus {
  active
  completed
  cancelled
}

enum SquadMemberRole {
  owner
  admin
  member
}

enum PaymentStatus {
  pending
  processing
  completed
  failed
  cancelled
  refunded
}

enum TransactionType {
  deposit
  withdrawal
  squad_entry
  squad_payout
  refund
}